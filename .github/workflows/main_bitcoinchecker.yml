# Docs for the Azure Web Apps Deploy action: https://github.com/azure/functions-action
# More GitHub Actions for Azure: https://github.com/Azure/actions
# More info on Python, GitHub Actions, and Azure Functions: https://aka.ms/python-webapps-actions

name: Build and deploy containerized Azure Function App - CryptoMorningReports

on:
  push:
    branches:
      - main
  workflow_dispatch:

env:
  PYTHON_VERSION: '3.11'
  IMAGE_NAME: 'cryptomorningreports'
  BICEP_FILE: infra/bicep/main.bicep

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write
      contents: read
      checks: write
      pull-requests: write
    env:
      ACR_NAME: ${{ vars.ACR_NAME }}
      ACR_SKU: ${{ vars.ACR_SKU }}
      RESOURCE_GROUP: ${{ vars.AZURE_RESOURCE_GROUP }}
      LOCATION: ${{ vars.AZURE_LOCATION }}
      STORAGE_ACCOUNT_NAME: ${{ vars.AZURE_STORAGE_ACCOUNT_NAME }}
      HOSTING_PLAN_NAME: ${{ vars.AZURE_HOSTING_PLAN_NAME }}
      HOSTING_PLAN_SKU: ${{ vars.AZURE_HOSTING_PLAN_SKU }}
      FUNCTION_APP_NAME: ${{ vars.AZURE_FUNCTION_APP_NAME }}
      IMAGE_TAG: ${{ github.sha }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          source venv/bin/activate
          python -m pytest tests/ --junitxml=test-results.xml

      - name: Publish Test Results
        uses: EnricoMi/publish-unit-test-result-action@v2
        if: always()
        with:
          files: test-results.xml

      - name: Validate required deployment variables
        run: |
          missing=()
          for var in ACR_NAME RESOURCE_GROUP LOCATION STORAGE_ACCOUNT_NAME HOSTING_PLAN_NAME FUNCTION_APP_NAME; do
            value="${!var}"
            if [ -z "$value" ]; then
              missing+=("$var")
            fi
          done
          if [ ${#missing[@]} -ne 0 ]; then
            echo "Missing required variables: ${missing[*]}. Configure repository or environment variables before running this workflow." >&2
            exit 1
          fi

      - name: Login to Azure
        uses: azure/login@v2
        with:
          client-id: ${{ secrets.AZURE_CLIENT_ID }}
          tenant-id: ${{ secrets.AZURE_TENANT_ID }}
          subscription-id: ${{ secrets.AZURE_SUBSCRIPTION_ID }}

      - name: Login to Azure Container Registry
        run: az acr login --name "$ACR_NAME"

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build and push function image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          platforms: linux/amd64
          tags: ${{ env.ACR_NAME }}.azurecr.io/${{ env.IMAGE_NAME }}:${{ env.IMAGE_TAG }}

      - name: Render Function App app settings
        env:
          FUNCTION_APP_SETTINGS_JSON: ${{ secrets.FUNCTION_APP_SETTINGS_JSON }}
        run: |
          python - <<'PY'
          import json
          import os
          from pathlib import Path

          payload = os.environ.get('FUNCTION_APP_SETTINGS_JSON')
          if payload:
              try:
                  data = json.loads(payload)
              except json.JSONDecodeError as exc:
                  raise SystemExit(f'Invalid JSON in FUNCTION_APP_SETTINGS_JSON secret: {exc}')
          else:
              data = []

          Path('appsettings.json').write_text(json.dumps(data))
          PY

      - name: Deploy infrastructure with Bicep
        run: |
          : "${ACR_SKU:=Basic}"
          : "${HOSTING_PLAN_SKU:=EP1}"
          az deployment group create \
            --resource-group "$RESOURCE_GROUP" \
            --template-file "$BICEP_FILE" \
            --parameters \
              location="$LOCATION" \
              acrName="$ACR_NAME" \
              acrSku="$ACR_SKU" \
              storageAccountName="$STORAGE_ACCOUNT_NAME" \
              hostingPlanName="$HOSTING_PLAN_NAME" \
              hostingPlanSku="$HOSTING_PLAN_SKU" \
              functionAppName="$FUNCTION_APP_NAME" \
              imageName="$IMAGE_NAME" \
              imageTag="$IMAGE_TAG" \
              appSettings=@appsettings.json