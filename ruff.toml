# Ruff configuration file
# Docs: https://docs.astral.sh/ruff/

# Target Python 3.11
target-version = "py311"

# Line length to match common formatter settings
line-length = 100

# Preview mode - keep disabled to maintain stable linting rules
preview = false

# Enable additional rules beyond the defaults
[lint]
select = [
    "E",      # pycodestyle errors
    "W",      # pycodestyle warnings
    "F",      # pyflakes
    "I",      # isort
    "N",      # pep8-naming
    "UP",     # pyupgrade
    "B",      # flake8-bugbear
    "A",      # flake8-builtins
    "C4",     # flake8-comprehensions
    "DTZ",    # flake8-datetimez
    "T10",    # flake8-debugger
    "EM",     # flake8-errmsg
    "ISC",    # flake8-implicit-str-concat
    "ICN",    # flake8-import-conventions
    "PIE",    # flake8-pie
    "PT",     # flake8-pytest-style
    "Q",      # flake8-quotes
    "RSE",    # flake8-raise
    "RET",    # flake8-return
    "SIM",    # flake8-simplify
    "TID",    # flake8-tidy-imports
    "ARG",    # flake8-unused-arguments
    "PTH",    # flake8-use-pathlib
    "PL",     # pylint
    "RUF",    # ruff-specific rules
]

ignore = [
    "E501",   # Line too long (handled by formatter)
    "PLR0912", # Too many branches
    "PLC0415", # Import should be at top-level (lazy imports are intentional)
    "EM101",  # Exception must not use a string literal (too strict for now)
    "EM102",  # Exception must not use an f-string literal (too strict for now)
    "TID252", # Relative imports are banned
    "ARG002", # Unused function argument (common in Azure Functions)
    "PTH123", # Path.open() should be used instead of built-in open()
    "SIM108", # Use ternary operator instead of if-else (readability preference)
]

# Allow unused variables when underscore-prefixed
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

# Exclude directories
exclude = [
    ".git",
    "__pycache__",
    ".venv",
    "venv",
    "env",
    ".env",
    "packaged_function",
    "results",
    "node_modules",
    ".pytest_cache",
    ".mypy_cache",
    ".ruff_cache",
]

[lint.per-file-ignores]
# Ignore certain rules in test files
"tests/**" = ["PLR2004", "S101"]
# Ignore import ordering in __init__.py files
"**/__init__.py" = ["F401", "I001"]

[lint.isort]
# Configure import sorting
known-first-party = ["sharedCode", "infra", "technical_analysis", "news", "reports", "integrations", "launchpool", "stepn"]
force-single-line = false
lines-after-imports = 2

[lint.pylint]
# Configure pylint-style checks
max-args = 10
max-branches = 15
max-returns = 8
max-statements = 60

[format]
# Use double quotes for strings
quote-style = "double"
# Indent with 4 spaces
indent-style = "space"
# Respect magic trailing commas
skip-magic-trailing-comma = false
# Auto-detect line ending
line-ending = "auto"
